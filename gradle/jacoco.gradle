apply plugin: "jacoco"

ext {
    jacocoInstrMin = 0.8 // instruction coverage
    jacocoBranchMin = 0.6 //Branch coverage

    // Files to be ignored
    jacocoExcludes = [
            'com/successwareg2/**/infrastructure/entity/**.java'
//        'com/successwareg2/spike/**'
    ]
}

//Unit test===========================
//Unit test report
jacocoTestReport {
    shouldRunAfter test
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        })
    }
}

//Unit test code coverage
jacocoTestCoverageVerification {
    shouldRunAfter test
    executionData test
    violationRules {
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'INSTRUCTION'
                minimum = jacocoInstrMin
            }
        }

        rule {
            element = 'BUNDLE'
            limit {
                counter = 'BRANCH'
                minimum = jacocoBranchMin
            }
        }
    }
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        })
    }
}

//Integration test===========================
//Integration test coverage
//task jacocoIntegrationTestReport(type: JacocoReport) {
//    shouldRunAfter integrationTest
//    sourceSets sourceSets.main
//    executionData integrationTest
//    afterEvaluate {
//        classDirectories.from = files(classDirectories.files.collect {
//            fileTree(dir: it, exclude: jacocoExcludes)
//        })
//    }
//}

//Integration test code coverage
task jacocoIntegrationTestCoverageVerification(type: JacocoCoverageVerification) {
    shouldRunAfter integrationTest, isolationTest
    executionData integrationTest, isolationTest
    sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(sourceSets.main.output)
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        })
    }
    violationRules {
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'INSTRUCTION'
                minimum = jacocoInstrMin
            }
        }

        rule {
            element = 'BUNDLE'
            limit {
                counter = 'BRANCH'
                minimum = jacocoBranchMin
            }
        }
    }
}

//All test===========================
//Unit test and component test and integration test coverage all together
task jacocoAllTestReport(type: JacocoReport) {
    shouldRunAfter check
    sourceSets sourceSets.main
    executionData test, integrationTest, isolationTest
    reports {
        xml.enabled true
    }
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        })
    }
}

//All test code coverage together
task jacocoAllTestCoverageVerification(type: JacocoCoverageVerification) {
    shouldRunAfter check
    executionData test, integrationTest, isolationTest
    sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(sourceSets.main.output)

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        })
    }


    violationRules {
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'INSTRUCTION'
                minimum = jacocoInstrMin
            }
        }

        rule {
            element = 'BUNDLE'
            limit {
                counter = 'BRANCH'
                minimum = jacocoBranchMin
            }
        }
    }
}

jacocoAllTestCoverageVerification.dependsOn jacocoAllTestReport
check.dependsOn jacocoAllTestReport
check.dependsOn jacocoAllTestCoverageVerification
